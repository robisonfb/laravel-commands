<?php

namespace Tests\Feature\Api;

use App\Models\{modelName};
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class {modelName}ApiTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected $user;
    protected ${modelNameLowerCase};

    /**
     * Configuração antes de cada teste.
     *
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp();

        // Criar usuário para testes
        $this->user = User::factory()->create();

        // Criar um {modelNameLowerCase} para testes
        $this->{modelNameLowerCase} = {modelName}::factory()->create([
            'user_id' => $this->user->id
        ]);

        // Configurar armazenamento fake para testes de upload
        Storage::fake('public');
    }

    /**
     * Testa a listagem de {modelNamePluralLowerCase}.
     *
     * @return void
     */
    public function test_can_list_{modelNamePluralSnakeCase}()
    {
        // Criar mais alguns registros para testar paginação
        {modelName}::factory()->count(5)->create();

        $response = $this->actingAs($this->user)
            ->getJson(route('{modelNamePluralLowerCase}.index'));

        $response->assertStatus(200)
            ->assertJsonStructure([
                'data' => [
                    '*' => [
                        'id',
                        'name',
                        'description',
                        // Adicione outros campos conforme necessário
                    ]
                ],
                'links',
                'meta'
            ])
            ->assertJsonCount(6, 'data'); // 5 criados + 1 do setUp
    }

    /**
     * Testa a filtragem e ordenação na listagem.
     *
     * @return void
     */
    public function test_can_filter_and_sort_{modelNamePluralSnakeCase}()
    {
        // Criar mais registros com diferentes atributos
        {modelName}::factory()->create(['name' => 'Zzzz Last']);
        {modelName}::factory()->create(['name' => 'Aaaa First']);

        // Testar ordenação ascendente por nome
        $response = $this->actingAs($this->user)
            ->getJson(route('{modelNamePluralLowerCase}.index', [
                'sort_by' => 'name',
                'sort_order' => 'asc'
            ]));

        $response->assertStatus(200);
        $data = $response->json('data');
        $this->assertEquals('Aaaa First', $data[0]['name']);

        // Testar filtragem por nome
        $response = $this->actingAs($this->user)
            ->getJson(route('{modelNamePluralLowerCase}.index', [
                'name' => 'Zzzz'
            ]));

        $response->assertStatus(200)
            ->assertJsonCount(1, 'data');
    }

    /**
     * Testa a visualização de um {modelNameLowerCase} específico.
     *
     * @return void
     */
    public function test_can_show_{modelNameSingularSnakeCase}()
    {
        $response = $this->actingAs($this->user)
            ->getJson(route('{modelNamePluralLowerCase}.show', $this->{modelNameLowerCase}->id));

        $response->assertStatus(200)
            ->assertJson([
                'data' => [
                    'id' => $this->{modelNameLowerCase}->id,
                    'name' => $this->{modelNameLowerCase}->name,
                ]
            ]);
    }

    /**
     * Testa a criação de um novo {modelNameLowerCase}.
     *
     * @return void
     */
    public function test_can_create_{modelNameSingularSnakeCase}()
    {
        $data = [
            'name' => $this->faker->name,
            'description' => $this->faker->paragraph,
            'status' => 'ativo',
            'price' => $this->faker->randomFloat(2, 10, 1000),
            // Adicione outros campos conforme necessário
        ];

        // Adicionar um arquivo de teste
        $data['files'] = [
            UploadedFile::fake()->image('photo.jpg')
        ];

        $response = $this->actingAs($this->user)
            ->postJson(route('{modelNamePluralLowerCase}.store'), $data);

        $response->assertStatus(201)
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'name',
                    'description',
                    'status',
                    'price',
                    // Verificar se arquivos foram processados
                    'files',
                    'created_at',
                ]
            ]);

        // Verificar se o registro foi criado no banco
        $this->assertDatabaseHas('{modelNamePluralSnakeCase}', [
            'name' => $data['name'],
            'description' => $data['description'],
        ]);

        // Verificar se o arquivo foi armazenado
        $createdModel = {modelName}::where('name', $data['name'])->first();
        $files = json_decode($createdModel->files, true);
        $this->assertNotEmpty($files);
        Storage::disk('public')->assertExists($files[0]);
    }

    /**
     * Testa a validação na criação.
     *
     * @return void
     */
    public function test_validation_on_create_{modelNameSingularSnakeCase}()
    {
        $response = $this->actingAs($this->user)
            ->postJson(route('{modelNamePluralLowerCase}.store'), [
                // Dados incompletos/inválidos
            ]);

        $response->assertStatus(422)
            ->assertJsonValidationErrors(['name']); // Campos obrigatórios
    }

    /**
     * Testa a atualização de um {modelNameLowerCase}.
     *
     * @return void
     */
    public function test_can_update_{modelNameSingularSnakeCase}()
    {
        $data = [
            'name' => 'Nome Atualizado',
            'description' => 'Descrição atualizada',
        ];

        $response = $this->actingAs($this->user)
            ->putJson(route('{modelNamePluralLowerCase}.update', $this->{modelNameLowerCase}->id), $data);

        $response->assertStatus(200)
            ->assertJson([
                'data' => [
                    'id' => $this->{modelNameLowerCase}->id,
                    'name' => 'Nome Atualizado',
                    'description' => 'Descrição atualizada',
                ]
            ]);

        // Verificar se o registro foi atualizado no banco
        $this->assertDatabaseHas('{modelNamePluralSnakeCase}', [
            'id' => $this->{modelNameLowerCase}->id,
            'name' => 'Nome Atualizado',
        ]);
    }

    /**
     * Testa a exclusão de um {modelNameLowerCase}.
     *
     * @return void
     */
    public function test_can_delete_{modelNameSingularSnakeCase}()
    {
        $response = $this->actingAs($this->user)
            ->deleteJson(route('{modelNamePluralLowerCase}.destroy', $this->{modelNameLowerCase}->id));

        $response->assertStatus(204); // No Content

        // Verificar se o registro foi removido (ou soft deleted)
        // Para soft delete:
        $this->assertSoftDeleted($this->{modelNameLowerCase});

        // Para hard delete:
        // $this->assertDatabaseMissing('{modelNamePluralSnakeCase}', ['id' => $this->{modelNameLowerCase}->id]);
    }

    /**
     * Testa a busca de {modelNamePluralLowerCase}.
     *
     * @return void
     */
    public function test_can_search_{modelNamePluralSnakeCase}()
    {
        // Criar registros com nomes específicos para testar a busca
        {modelName}::factory()->create(['name' => 'Termo Especial de Busca']);
        {modelName}::factory()->create(['name' => 'Outro Nome Qualquer']);

        $response = $this->actingAs($this->user)
            ->getJson(route('{modelNamePluralLowerCase}.search', [
                'q' => 'Especial',
                'column' => 'name'
            ]));

        $response->assertStatus(200)
            ->assertJsonCount(1, 'data')
            ->assertJsonPath('data.0.name', 'Termo Especial de Busca');

        // Testar busca em todos os campos
        $response = $this->actingAs($this->user)
            ->getJson(route('{modelNamePluralLowerCase}.search', [
                'q' => 'Especial',
                'column' => 'all'
            ]));

        $response->assertStatus(200)
            ->assertJsonCount(1, 'data');
    }

    /**
     * Testa o comportamento quando um {modelNameLowerCase} não é encontrado.
     *
     * @return void
     */
    public function test_returns_404_when_{modelNameSingularSnakeCase}_not_found()
    {
        $nonExistentId = 9999;

        $this->actingAs($this->user)
            ->getJson(route('{modelNamePluralLowerCase}.show', $nonExistentId))
            ->assertStatus(404);

        $this->actingAs($this->user)
            ->putJson(route('{modelNamePluralLowerCase}.update', $nonExistentId), ['name' => 'Test'])
            ->assertStatus(404);

        $this->actingAs($this->user)
            ->deleteJson(route('{modelNamePluralLowerCase}.destroy', $nonExistentId))
            ->assertStatus(404);
    }

    /**
     * Testa a autorização para acessar os endpoints.
     *
     * @return void
     */
    public function test_requires_authentication()
    {
        // Teste sem autenticação
        $this->getJson(route('{modelNamePluralLowerCase}.index'))
            ->assertStatus(401);

        $this->getJson(route('{modelNamePluralLowerCase}.show', $this->{modelNameLowerCase}->id))
            ->assertStatus(401);

        $this->postJson(route('{modelNamePluralLowerCase}.store'), ['name' => 'Test'])
            ->assertStatus(401);

        $this->putJson(route('{modelNamePluralLowerCase}.update', $this->{modelNameLowerCase}->id), ['name' => 'Test'])
            ->assertStatus(401);

        $this->deleteJson(route('{modelNamePluralLowerCase}.destroy', $this->{modelNameLowerCase}->id))
            ->assertStatus(401);
    }
}
