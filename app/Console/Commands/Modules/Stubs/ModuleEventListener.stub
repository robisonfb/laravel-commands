<?php

namespace App\Listeners;

use App\Events\{modelName}Created;
use App\Models\{modelName};
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Support\Facades\Log;

class {modelName}Listener implements ShouldQueue
{
    use InteractsWithQueue;

    /**
     * Cria o ouvinte de evento.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Manipula o evento.
     *
     * @param  {modelName}Created  $event
     * @return void
     */
    public function handle({modelName}Created $event)
    {
        // Acessa o modelo através do evento
        ${modelNameLowerCase} = $event->{modelNameLowerCase};

        // Exemplo: Registrar atividade
        Log::info('{modelName} criado', [
            'id' => ${modelNameLowerCase}->id,
            'name' => ${modelNameLowerCase}->name,
            'user_id' => auth()->id() ?? 'sistema'
        ]);

        // Exemplo: Atualizar estatísticas ou realizar processamento assíncrono
        // Stats::increment('{modelNamePluralLowerCase}_count');

        // Exemplo: Enviar notificação
        // Notification::send(User::admins()->get(), new {modelName}CreatedNotification(${modelNameLowerCase}));
    }

    /**
     * Manipula a falha de processamento do trabalho.
     *
     * @param  {modelName}Created  $event
     * @param  \Throwable  $exception
     * @return void
     */
    public function failed({modelName}Created $event, \Throwable $exception)
    {
        // Registrar falha no processamento do evento
        Log::error('Falha ao processar evento {modelName}Created', [
            'id' => $event->{modelNameLowerCase}->id,
            'error' => $exception->getMessage()
        ]);
    }
}
