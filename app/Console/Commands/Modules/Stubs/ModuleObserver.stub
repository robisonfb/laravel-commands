<?php

namespace App\Observers;

use App\Models\{modelName};
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

class {modelName}Observer
{
    /**
     * Manipula o evento de criação do {modelName}.
     *
     * @param  \App\Models\{modelName}  ${modelNameLowerCase}
     * @return void
     */
    public function created({modelName} ${modelNameLowerCase})
    {
        // Limpar cache relacionado
        $this->clearCache();

        // Registrar atividade
        Log::info('{modelName} criado', ['id' => ${modelNameLowerCase}->id, 'name' => ${modelNameLowerCase}->name]);
    }

    /**
     * Manipula o evento de atualização do {modelName}.
     *
     * @param  \App\Models\{modelName}  ${modelNameLowerCase}
     * @return void
     */
    public function updated({modelName} ${modelNameLowerCase})
    {
        // Limpar cache relacionado
        $this->clearCache(${modelNameLowerCase}->id);

        // Registrar atividade
        Log::info('{modelName} atualizado', ['id' => ${modelNameLowerCase}->id, 'name' => ${modelNameLowerCase}->name]);
    }

    /**
     * Manipula o evento de exclusão do {modelName}.
     *
     * @param  \App\Models\{modelName}  ${modelNameLowerCase}
     * @return void
     */
    public function deleted({modelName} ${modelNameLowerCase})
    {
        // Limpar cache relacionado
        $this->clearCache(${modelNameLowerCase}->id);

        // Registrar atividade
        Log::info('{modelName} excluído', ['id' => ${modelNameLowerCase}->id, 'name' => ${modelNameLowerCase}->name]);
    }

    /**
     * Manipula o evento de restauração do {modelName}.
     *
     * @param  \App\Models\{modelName}  ${modelNameLowerCase}
     * @return void
     */
    public function restored({modelName} ${modelNameLowerCase})
    {
        // Limpar cache relacionado
        $this->clearCache(${modelNameLowerCase}->id);

        // Registrar atividade
        Log::info('{modelName} restaurado', ['id' => ${modelNameLowerCase}->id, 'name' => ${modelNameLowerCase}->name]);
    }

    /**
     * Manipula o evento de exclusão permanente do {modelName}.
     *
     * @param  \App\Models\{modelName}  ${modelNameLowerCase}
     * @return void
     */
    public function forceDeleted({modelName} ${modelNameLowerCase})
    {
        // Limpar arquivos associados
        if (!empty(${modelNameLowerCase}->files)) {
            $files = is_array(${modelNameLowerCase}->files)
                ? ${modelNameLowerCase}->files
                : json_decode(${modelNameLowerCase}->files, true);

            if (!empty($files)) {
                foreach ($files as $file) {
                    Storage::delete($file);
                }
            }
        }

        // Limpar cache relacionado
        $this->clearCache(${modelNameLowerCase}->id);

        // Registrar atividade
        Log::info('{modelName} excluído permanentemente', ['id' => ${modelNameLowerCase}->id, 'name' => ${modelNameLowerCase}->name]);
    }

    /**
     * Limpa o cache relacionado ao modelo.
     *
     * @param int|null $id
     * @return void
     */
    private function clearCache(?int $id = null)
    {
        // Limpar cache específico se ID for fornecido
        if ($id) {
            Cache::forget('{modelNameLowerCase}_' . $id);
        }

        // Limpar caches gerais
        Cache::forget('{modelNamePluralLowerCase}_all');
        Cache::forget('recent_{modelNamePluralLowerCase}');
        Cache::forget('featured_{modelNamePluralLowerCase}');
    }
}
