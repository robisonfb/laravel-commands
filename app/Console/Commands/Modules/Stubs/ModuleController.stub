<?php

namespace DummyNamespace;

use App\Http\Requests\{Store{modelName}Request, Update{modelName}Request};
use App\Http\Resources\{{modelName}Collection, {modelName}Resource};
use App\Models\{modelName};

use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Http\{JsonResponse, Request, Response};
use Illuminate\Support\Facades\{Cache, DB, Log, Schema};

class DummyClass extends Controller
{
    /**
     * Exibe uma listagem de {modelNamePluralLowerCase}.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function index(Request $request): JsonResponse
    {
        try {
            // Validar parâmetros de paginação e ordenação
            $validated = $request->validate([
                'per_page' => 'nullable|integer|min:1|max:100',
                'sort_by' => 'nullable|string',
                'sort_order' => 'nullable|string|in:asc,desc'
            ]);

            // Configurar parâmetros de paginação
            $perPage = $validated['per_page'] ?? 15;

            // Configurar parâmetros de ordenação
            $validSortColumns = ['created_at', 'updated_at', 'id']; // Colunas permitidas
            $sortBy = $validated['sort_by'] ?? 'created_at';
            if (!in_array(strtolower($sortBy), $validSortColumns)) {
                $sortBy = 'created_at';
            }

            $sortOrder = $validated['sort_order'] ?? 'desc';

            // Chave de cache única baseada nos parâmetros
            $page = $request->query('page', 1);
            $cacheKey = "{modelNamePluralLowerCase}_page_{$page}_perpage_{$perPage}_sort_{$sortBy}_order_{$sortOrder}";

            // Buscar resultados do cache ou gerar novos
            ${modelNamePluralLowerCase} = Cache::remember($cacheKey, 3600, function () use ($perPage, $sortBy, $sortOrder) {
                return {modelName}::orderBy($sortBy, $sortOrder)->paginate($perPage);
            });

            // Se não houver resultados
            if (${modelNamePluralLowerCase}->isEmpty()) {
                return response()->json([
                    'message' => __('No {modelNamePluralLowerCase} results found'),
                    'data' => []
                ], Response::HTTP_OK);
            }

            // Retornar coleção de recursos
            return (new {modelName}Collection(${modelNamePluralLowerCase}))
                ->response()
                ->setStatusCode(Response::HTTP_OK);

        } catch (\Illuminate\Validation\ValidationException $e) {
            return response()->json([
                'message' => __('Invalid pagination or sorting parameters'),
                'errors' => $e->errors()
            ], Response::HTTP_UNPROCESSABLE_ENTITY);
        } catch (\Exception $e) {
            Log::error('Erro ao buscar {modelNamePluralLowerCase}: ' . $e->getMessage());
            return response()->json([
                'message' => __('Failed to fetch {modelNamePluralLowerCase}'),
                'error' => $e->getMessage()
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Armazena um novo {modelNameLowerCase} no banco de dados.
     *
     * @param Store{modelName}Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function store(Store{modelName}Request $request): JsonResponse
    {
        DB::beginTransaction();

        try {
            $validatedData = $request->validated();

            // Processar arquivos
            if ($request->hasFile('files')) {
                try {
                    $imagePaths = store_files($request, 'files', '{modelNamePluralLowerCase}', 'public');
                    $validatedData['files'] = json_encode($imagePaths);
                } catch (\Exception $e) {
                    DB::rollBack();
                    Log::error('Erro ao processar arquivos: ' . $e->getMessage());
                    return response()->json([
                        'message' => __('Failed to process uploaded files'),
                        'error' => $e->getMessage()
                    ], Response::HTTP_UNPROCESSABLE_ENTITY);
                }
            }

            // Criar registro
            ${modelNameLowerCase} = {modelName}::create($validatedData);

            // Carregar relacionamentos, se necessário
            // ${modelNameLowerCase}->load(['relationship1', 'relationship2']);

            DB::commit();

            // Limpar caches
            $this->clearRelatedCaches();

            // Resposta
            return (new {modelName}Resource(${modelNameLowerCase}))
                ->response()
                ->setStatusCode(Response::HTTP_CREATED);

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Erro ao criar {modelNameLowerCase}: ' . $e->getMessage());

            return response()->json([
                'message' => __('Failed to create {modelNameLowerCase}'),
                'error' => $e->getMessage()
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Exibe o {modelNameLowerCase} especificado.
     *
     * @param int $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function show($id): JsonResponse
    {
        try {
            // Validar ID
            if (!is_numeric($id) || $id <= 0) {
                return response()->json([
                    'message' => __('Invalid ID format')
                ], Response::HTTP_BAD_REQUEST);
            }

            // Buscar do cache ou do banco
            ${modelNameLowerCase} = Cache::remember('{modelNameLowerCase}_' . $id, 3600, function () use ($id) {
                // Aqui podemos incluir relacionamentos com 'with' se necessário
                // return {modelName}::with(['relationship1', 'relationship2'])->findOrFail($id);
                return {modelName}::findOrFail($id);
            });

            // Retornar recurso
            return (new {modelName}Resource(${modelNameLowerCase}))
                ->response()
                ->setStatusCode(Response::HTTP_OK);

        } catch (ModelNotFoundException $e) {
            return response()->json([
                'message' => __('{modelName} not found')
            ], Response::HTTP_NOT_FOUND);
        } catch (\Exception $e) {
            Log::error('Erro ao buscar {modelNameLowerCase}: ' . $e->getMessage());
            return response()->json([
                'message' => __('Failed to fetch {modelNameLowerCase}'),
                'error' => $e->getMessage()
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Atualiza o {modelNameLowerCase} especificado no banco de dados.
     *
     * @param Update{modelName}Request $request
     * @param int $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function update(Update{modelName}Request $request, $id): JsonResponse
    {
        DB::beginTransaction();

        try {
            // Validar ID
            if (!is_numeric($id) || $id <= 0) {
                return response()->json([
                    'message' => __('Invalid ID format')
                ], Response::HTTP_BAD_REQUEST);
            }

            // Buscar registro
            ${modelNameLowerCase} = {modelName}::findOrFail($id);
            $validatedData = $request->validated();

            // Processar arquivos novos
            if ($request->hasFile('files')) {
                try {
                    $newFilePaths = store_files($request, 'files', '{modelNamePluralLowerCase}', 'public');

                    // Mesclar com arquivos existentes
                    $existingFiles = !empty(${modelNameLowerCase}->files)
                        ? json_decode(${modelNameLowerCase}->files, true) ?: []
                        : [];

                    $allFiles = array_merge($existingFiles, $newFilePaths);
                    $validatedData['files'] = json_encode($allFiles);
                } catch (\Exception $e) {
                    DB::rollBack();
                    Log::error('Erro ao processar arquivos: ' . $e->getMessage());
                    return response()->json([
                        'message' => __('Failed to process uploaded files'),
                        'error' => $e->getMessage()
                    ], Response::HTTP_UNPROCESSABLE_ENTITY);
                }
            }

            // Remover arquivos específicos
            if ($request->has('remove_files')) {
                try {
                    $filesToRemove = $request->input('remove_files');

                    if (!is_array($filesToRemove)) {
                        throw new \Exception('O campo remove_files deve ser um array');
                    }

                    $existingFiles = !empty(${modelNameLowerCase}->files)
                        ? json_decode(${modelNameLowerCase}->files, true) ?: []
                        : [];

                    if (!empty($existingFiles)) {
                        $remainingFiles = array_diff($existingFiles, $filesToRemove);

                        // Excluir arquivos físicos
                        if (!empty($filesToRemove)) {
                            delete_files($filesToRemove);
                        }

                        // Atualizar lista de arquivos
                        $validatedData['files'] = json_encode(array_values($remainingFiles));
                    }
                } catch (\Exception $e) {
                    DB::rollBack();
                    Log::error('Erro ao remover arquivos: ' . $e->getMessage());
                    return response()->json([
                        'message' => __('Failed to remove files'),
                        'error' => $e->getMessage()
                    ], Response::HTTP_UNPROCESSABLE_ENTITY);
                }
            }

            // Atualizar registro
            ${modelNameLowerCase}->update($validatedData);

            // Recarregar o modelo com dados atualizados
            ${modelNameLowerCase}->refresh();

            DB::commit();

            // Limpar caches
            Cache::forget('{modelNameLowerCase}_' . $id);
            $this->clearRelatedCaches();

            // Resposta
            return (new {modelName}Resource(${modelNameLowerCase}))
                ->response()
                ->setStatusCode(Response::HTTP_OK);

        } catch (ModelNotFoundException $e) {
            DB::rollBack();
            return response()->json([
                'message' => __('{modelName} not found')
            ], Response::HTTP_NOT_FOUND);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Erro ao atualizar {modelNameLowerCase}: ' . $e->getMessage());

            return response()->json([
                'message' => __('Failed to update {modelNameLowerCase}'),
                'error' => $e->getMessage()
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Remove o {modelNameLowerCase} especificado do banco de dados.
     *
     * @param int $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id): JsonResponse
    {
        DB::beginTransaction();

        try {
            // Validar ID
            if (!is_numeric($id) || $id <= 0) {
                return response()->json([
                    'message' => __('Invalid ID format')
                ], Response::HTTP_BAD_REQUEST);
            }

            // Buscar registro
            ${modelNameLowerCase} = {modelName}::findOrFail($id);

            // Excluir arquivos físicos se existirem
            if (!empty(${modelNameLowerCase}->files)) {
                try {
                    $files = json_decode(${modelNameLowerCase}->files, true) ?: [];
                    if (!empty($files)) {
                        delete_files($files);
                    }
                } catch (\Exception $e) {
                    Log::warning('Erro ao excluir arquivos físicos: ' . $e->getMessage());
                    // Continua a execução mesmo com erro nos arquivos
                }
            }

            // Excluir registro
            ${modelNameLowerCase}->delete();

            DB::commit();

            // Limpar caches
            Cache::forget('{modelNameLowerCase}_' . $id);
            $this->clearRelatedCaches();

            // Retornar resposta sem conteúdo
            return response()->json(null, Response::HTTP_NO_CONTENT);

        } catch (ModelNotFoundException $e) {
            DB::rollBack();
            return response()->json([
                'message' => __('{modelName} not found')
            ], Response::HTTP_NOT_FOUND);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Erro ao excluir {modelNameLowerCase}: ' . $e->getMessage());

            return response()->json([
                'message' => __('Failed to delete {modelNameLowerCase}'),
                'error' => $e->getMessage()
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Limpa os caches relacionados a listagens de {modelNamePluralLowerCase}.
     * Verifica automaticamente o driver de cache e usa o método mais apropriado.
     *
     * @return void
     */
    private function clearRelatedCaches(): void
    {
        $driver = config('cache.default');
        $supportsTags = in_array($driver, ['redis', 'memcached']);

        if ($supportsTags) {
            // Para drivers que suportam tags (Redis, Memcached)
            try {
                Cache::tags(['{modelNamePluralLowerCase}'])->flush();
                return;
            } catch (\Exception $e) {
                // Fallback caso tags não estejam configuradas corretamente
                Log::warning("Tentativa de usar tags de cache falhou: {$e->getMessage()}");
            }
        }

        // Para drivers file, database ou outros sem suporte a tags
        // ou fallback se o suporte a tags falhar

        // Se estiver usando file driver, força limpeza de caches específicos
        if ($driver === 'file') {
            // Esquema simplificado - esquece caches mais comuns
            for ($page = 1; $page <= 10; $page++) {
                for ($perPage = 10; $perPage <= 100; $perPage += 10) {
                    Cache::forget("{modelNamePluralLowerCase}_page{$page}_{$perPage}_created_at_desc");
                    Cache::forget("{modelNamePluralLowerCase}_page{$page}_{$perPage}_updated_at_desc");
                    Cache::forget("{modelNamePluralLowerCase}_page{$page}_{$perPage}_created_at_asc");
                    Cache::forget("{modelNamePluralLowerCase}_page{$page}_{$perPage}_updated_at_asc");
                }
            }
        } else {
            // Para outros drivers que não sejam file ou que suportem tags
            // Pode ser implementado conforme a necessidade específica do driver
            // Exemplo para o driver database:
            if ($driver === 'database') {
                // Usa query direta para limpar o cache no banco
                DB::table('cache')
                    ->where('key', 'like', '%{modelNamePluralLowerCase}%')
                    ->delete();
            }
        }

        // Limpa também caches específicos de itens individuais que podem estar relacionados
        try {
            $ids = {modelName}::pluck('id')->toArray();
            foreach ($ids as $id) {
                Cache::forget('{modelNameLowerCase}_' . $id);
            }
        } catch (\Exception $e) {
            Log::warning("Erro ao limpar caches individuais: {$e->getMessage()}");
        }
    }
}
