<?php

namespace DummyNamespace;

use App\Http\Controllers\Controller;
use App\Http\Requests\{modelName}\{Store{modelName}Request, Update{modelName}Request};
use App\Http\Resources\{modelName}\{{modelName}Collection, {modelName}Resource};
use App\Models\{modelName};
use Illuminate\Http\{JsonResponse, Request};
use Illuminate\Support\Facades\{Auth, DB, Log};
use Illuminate\Validation\ValidationException;

/**
 * @group {modelName}s
 *
 * APIs for managing {modelNamePluralLowerCase}.
 */
class DummyClass extends Controller
{
    // Constants for configuration
    private const DEFAULT_PER_PAGE = 15;
    private const MAX_PER_PAGE = 100;
    private const VALID_SORT_COLUMNS = ['created_at', 'updated_at', 'id'];
    private const VALID_SORT_ORDERS = ['asc', 'desc'];
    private const DEFAULT_SORT_BY = 'created_at';
    private const DEFAULT_SORT_ORDER = 'desc';

    /**
     * List {modelNamePluralLowerCase}
     *
     * Retrieve a paginated list of {modelNamePluralLowerCase} with optional filtering, sorting, and searching capabilities.
     *
     * **Pagination and Sorting:**
     * - Default pagination: 15 items per page (max 100)
     * - Default sorting: by created_at in descending order
     * - Allowed sort columns: created_at, updated_at, id
     *
     * **Search Functionality:**
     * - Search is performed on the 'title' field using LIKE operator
     * - Search term is case-insensitive and supports partial matches
     *
     * @authenticated
     *
     * @queryParam page integer optional Page number to return. Default: 1. Example: 1
     * @queryParam per_page integer optional Number of items per page (1-100). Default: 15. Example: 5
     * @queryParam sort_by string optional Column to sort by (created_at, updated_at, id). Default: created_at. Example: updated_at
     * @queryParam sort_order string optional Sort direction (asc, desc). Default: desc. Example: asc
     * @queryParam search string optional Search term to filter results by title. Example: Example Title
     *
     * @response 200 {
     *   "status": "success",
     *   "message": "{modelName} retrieved successfully",
     *   "data": {
     *     "items": [
     *       {
     *         "id": 1,
     *         "title": "Example Title",
     *         "created_at": "04/06/2025 15:59",
     *         "updated_at": "04/06/2025 15:59"
     *       }
     *     ],
     *     "current_page": 1,
     *     "first_page_url": "http://localhost/api/{modelNamePluralLowerCase}?page=1",
     *     "from": 1,
     *     "last_page": 1,
     *     "last_page_url": "http://localhost/api/{modelNamePluralLowerCase}?page=1",
     *     "links": [...],
     *     "next_page_url": null,
     *     "path": "http://localhost/api/{modelNamePluralLowerCase}",
     *     "per_page": 15,
     *     "prev_page_url": null,
     *     "to": 1,
     *     "total": 1
     *   },
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     *
     * @response 422 {
     *   "status": "error",
     *   "message": "Invalid or missing data",
     *   "data": {
     *     "per_page": ["The per page must be an integer."],
     *     "sort_order": ["The selected sort order is invalid."]
     *   },
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     *
     * @response 500 {
     *   "status": "error",
     *   "message": "Failed to fetch {modelNamePluralLowerCase}",
     *   "data": ["Database connection error"],
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     */
    public function index(Request $request): JsonResponse
    {
        $this->authorize('viewAny', {modelName}::class);

        try {
            $validated = $this->validateIndexRequest($request);

            $query = $this->buildQuery($request, $validated);

            ${modelNamePluralLowerCase} = $query->orderBy(
                $validated['sort_by'] ?? self::DEFAULT_SORT_BY,
                $validated['sort_order'] ?? self::DEFAULT_SORT_ORDER
            )->paginate($validated['per_page'] ?? self::DEFAULT_PER_PAGE);

            return $this->handleIndexResponse(${modelNamePluralLowerCase});

        } catch (ValidationException $e) {
            return $this->handleValidationError($e, 'index');
        } catch (\Exception $e) {
            return $this->handleGeneralError($e, 'index', 'Failed to fetch {modelNamePluralLowerCase}');
        }
    }

    /**
     * Create {modelNameLowerCase}
     *
     * Create a new {modelNameLowerCase} record in the database.
     *
     * **Transaction Management:**
     * - All operations are wrapped in a database transaction
     * - If any step fails, all changes are rolled back
     *
     * @authenticated
     *
     * @bodyParam title string required The title of the {modelNameLowerCase} (3-255 characters). Example: Example Title
     * @bodyParam description string optional Description of the {modelNameLowerCase} (max 1000 characters). Example: This is an example description
     *
     * @response 201 {
     *   "status": "success",
     *   "message": "{modelName} created successfully",
     *   "data": {
     *     "id": 1,
     *     "title": "Example Title",
     *     "description": "This is an example description",
     *     "created_at": "04/06/2025 15:59",
     *     "updated_at": "04/06/2025 15:59"
     *   },
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     *
     * @response 422 {
     *   "status": "error",
     *   "message": "Invalid or missing data",
     *   "data": {
     *     "title": ["The title field is required."],
     *     "description": ["The description must not be greater than 1000 characters."]
     *   },
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     *
     * @response 500 {
     *   "status": "error",
     *   "message": "Failed to create {modelNameLowerCase}",
     *   "data": ["Database connection error"],
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     */
    public function store(Store{modelName}Request $request): JsonResponse
    {
        // A autorização já é feita no FormRequest, mas pode adicionar aqui também se preferir
        // $this->authorize('create', {modelName}::class);

        return DB::transaction(function () use ($request) {
            try {
                ${modelNameLowerCase} = {modelName}::create($request->validated());

                return $this->success(
                    new {modelName}Resource(${modelNameLowerCase}),
                    __('{modelName} created successfully'),
                    201
                );
            } catch (\Exception $e) {
                return $this->handleGeneralError($e, 'store', 'Failed to create {modelNameLowerCase}');
            }
        });
    }

    /**
     * Show {modelNameLowerCase}
     *
     * Retrieve a specific {modelNameLowerCase} by its ID.
     *
     * **Route Model Binding:**
     * - Automatically resolves the model instance from the route parameter
     * - Returns 404 automatically if the model is not found
     *
     * @authenticated
     *
     * @urlParam id integer required The ID of the {modelNameLowerCase} to retrieve. Example: 1
     *
     * @response 200 {
     *   "status": "success",
     *   "message": "{modelName} retrieved successfully",
     *   "data": {
     *     "id": 1,
     *     "title": "Example Title",
     *     "description": "This is an example description",
     *     "created_at": "04/06/2025 15:59",
     *     "updated_at": "04/06/2025 15:59"
     *   },
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     *
     * @response 404 {
     *   "status": "error",
     *   "message": "No query results for model [{modelName}]",
     *   "data": [],
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     *
     * @response 500 {
     *   "status": "error",
     *   "message": "Failed to fetch {modelNameLowerCase}",
     *   "data": ["Database connection error"],
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     */
    public function show({modelName} ${modelNameLowerCase}): JsonResponse
    {
        $this->authorize('view', ${modelNameLowerCase});

        try {
            return $this->success(
                new {modelName}Resource(${modelNameLowerCase}),
                __('{modelName} retrieved successfully')
            );
        } catch (\Exception $e) {
            return $this->handleGeneralError($e, 'show', 'Failed to fetch {modelNameLowerCase}', ${modelNameLowerCase}->id);
        }
    }

    /**
     * Update {modelNameLowerCase}
     *
     * Update a specific {modelNameLowerCase} with new data.
     *
     * **Route Model Binding:**
     * - Automatically resolves the model instance
     * - Returns 404 if model not found
     *
     * @authenticated
     *
     * @urlParam id integer required The ID of the {modelNameLowerCase} to update. Example: 1
     *
     * @bodyParam title string optional The title of the {modelNameLowerCase}. Example: Updated Title
     * @bodyParam description string optional The description of the {modelNameLowerCase}. Example: Updated description
     *
     * @response 200 {
     *   "status": "success",
     *   "message": "{modelName} updated successfully",
     *   "data": {
     *     "id": 1,
     *     "title": "Updated Title",
     *     "description": "Updated description",
     *     "updated_at": "2024-01-01T12:00:00.000000Z"
     *   },
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     *
     * @response 422 {
     *   "status": "error",
     *   "message": "Validation failed",
     *   "data": {
     *     "title": ["The title field is required."]
     *   },
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     *
     * @response 500 {
     *   "status": "error",
     *   "message": "Failed to update {modelNameLowerCase}",
     *   "data": ["Database error occurred"],
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     */
    public function update(Update{modelName}Request $request, {modelName} ${modelNameLowerCase}): JsonResponse
    {
        // A autorização já é feita no FormRequest, mas pode adicionar aqui também se preferir
        // $this->authorize('update', ${modelNameLowerCase});

        return DB::transaction(function () use ($request, ${modelNameLowerCase}) {
            try {
                ${modelNameLowerCase}->update($request->validated());
                ${modelNameLowerCase}->refresh();

                return $this->success(
                    new {modelName}Resource(${modelNameLowerCase}),
                    __('{modelName} updated successfully')
                );
            } catch (\Exception $e) {
                return $this->handleGeneralError($e, 'update', 'Failed to update {modelNameLowerCase}', ${modelNameLowerCase}->id);
            }
        });
    }

    /**
     * Delete {modelNameLowerCase}
     *
     * This endpoint allows deleting a specific record from the database.
     * Uses transactions to ensure data integrity.
     *
     * @authenticated
     *
     * @urlParam id integer required The ID of the {modelNameLowerCase} to delete. Example: 1
     *
     * @response 204 {
     *   "status": "success",
     *   "message": "Record deleted successfully",
     *   "data": null,
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     *
     * @response 404 {
     *   "status": "error",
     *   "message": "{modelName} not found",
     *   "data": [],
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     *
     * @response 500 {
     *   "status": "error",
     *   "message": "Failed to delete {modelNameLowerCase}",
     *   "data": ["Database connection error"],
     *   "meta": {
     *     "version": "1.0.0"
     *   }
     * }
     */
    public function destroy({modelName} ${modelNameLowerCase}): JsonResponse
    {
        $this->authorize('delete', ${modelNameLowerCase});

        return DB::transaction(function () use (${modelNameLowerCase}) {
            try {
                ${modelNameLowerCase}->delete();
                return $this->success(null, __('Record deleted successfully'), 204);
            } catch (\Exception $e) {
                return $this->handleGeneralError($e, 'destroy', 'Failed to delete {modelNameLowerCase}', ${modelNameLowerCase}->id);
            }
        });
    }

    // ===== PRIVATE HELPER METHODS =====

    /**
     * Validate index request parameters
     */
    private function validateIndexRequest(Request $request): array
    {
        return $request->validate([
            'per_page' => 'nullable|integer|min:1|max:' . self::MAX_PER_PAGE,
            'sort_by' => 'nullable|string|in:' . implode(',', self::VALID_SORT_COLUMNS),
            'sort_order' => 'nullable|string|in:' . implode(',', self::VALID_SORT_ORDERS),
            'search' => 'nullable|string|max:255'
        ]);
    }

    /**
     * Build query with filters
     */
    private function buildQuery(Request $request, array $validated): \Illuminate\Database\Eloquent\Builder
    {
        $query = {modelName}::query();

        if (!empty($validated['search'])) {
            $query->where('title', 'like', '%' . $validated['search'] . '%');
        }

        return $query;
    }

    /**
     * Handle index response
     */
    private function handleIndexResponse($results): JsonResponse
    {
        if ($results->isEmpty()) {
            return $this->success([], __('No {modelNamePluralLowerCase} results found'));
        }

        return $this->success(
            new {modelName}Collection($results),
            __('{modelName} retrieved successfully')
        );
    }

    /**
     * Handle validation errors
     */
    private function handleValidationError(ValidationException $e, string $method): JsonResponse
    {
        $this->logValidationError($e, $method);
        return $this->error($e->errors(), __('Invalid or missing data'), 422);
    }

    /**
     * Handle general errors
     */
    private function handleGeneralError(\Exception $e, string $method, string $message, ?int $modelId = null): JsonResponse
    {
        $this->logError($e, $method, $modelId);
        return $this->error([$e->getMessage()], __($message), 500);
    }

    /**
     * Log validation errors
     */
    private function logValidationError(ValidationException $e, string $method): void
    {
        Log::warning("Validation error in {modelName}Controller::{$method}", [
            'controller' => '{modelName}Controller',
            'method' => $method,
            'user_id' => Auth::id() ?? 'guest',
            'validation_errors' => $e->errors(),
            'timestamp' => now()
        ]);
    }

    /**
     * Log general errors
     */
    private function logError(\Exception $e, string $method, ?int $modelId = null): void
    {
        $context = [
            'controller' => '{modelName}Controller',
            'method' => $method,
            'user_id' => Auth::id() ?? 'guest',
            'error_message' => $e->getMessage(),
            'error_file' => $e->getFile(),
            'error_line' => $e->getLine(),
            'timestamp' => now()
        ];

        if ($modelId) {
            $context['model_id'] = $modelId;
        }

        Log::error("Error in {modelName}Controller::{$method}", $context);
    }

    /**
     * Get validation rules for API documentation
     */
    public static function getValidationConstraints(): array
    {
        return [
            'pagination' => [
                'default_per_page' => self::DEFAULT_PER_PAGE,
                'max_per_page' => self::MAX_PER_PAGE,
            ],
            'sorting' => [
                'valid_columns' => self::VALID_SORT_COLUMNS,
                'valid_orders' => self::VALID_SORT_ORDERS,
                'defaults' => [
                    'sort_by' => self::DEFAULT_SORT_BY,
                    'sort_order' => self::DEFAULT_SORT_ORDER,
                ]
            ]
        ];
    }
}
